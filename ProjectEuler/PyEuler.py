def main():
    problem_4()


def problem_4():
    """
    Largest palindrome product
    Problem 4
    A palindromic number reads the same both ways. The largest palindrome made
    from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    pass


def problem_3():
    from itertools import islice, count
    from math import sqrt
    """
    Problem 3
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
    """
    big = 600851475143
    littles = []
    for x in range(1, big/10000): # arbitrarily divided until I found one that
        if big % x == 0:          # worked without a memory error
            littles.append(x)

    def is_prime(n):
        return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))

    primes = []
    for item in littles:
        if is_prime(item):
            primes.append(item)

    print primes


def problem_2():
    """
    Problem 2
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    """
    total = 0
    fibonacci = [1, 1] # just to get us started

    while fibonacci[len(fibonacci)-1] < 4000000:
        fibonacci.append(fibonacci[-1] + fibonacci[-2])
        if fibonacci[len(fibonacci)-1] % 2 == 0:
            total += fibonacci[len(fibonacci)-1]
    print total


def problem_1():
    """
    Problem 1
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    total = 0
    for x in range(0, 1000):
        if x % 3 == 0 or x % 5 == 0:
            total += x

    print total


if __name__ == '__main__':
    main()
